const filename = "./answer.ts";
let answer;

describe("challenge part-1_hard-1", () => {
  it("should load the function from answer.ts file", async () => {
    answer = (await import(filename)).default;
    expect(answer.default).toBeDefined();
  });
  it("should load the 6pixels.png image and return byte array", async () => {
    const bytes = await answer.default(
      "./challenges/part-1_hard-1/6pixels.png"
    );
    const expectedBytes = [
      255, 255, 0, 255, 0, 255, 0, 255, 255, 0, 255, 0, 0, 0, 255, 255, 0, 0,
    ];
    expect(bytes).toEqual(expectedBytes);
  });
  it("should load the beautiful-landscape.png image and return byte array", async () => {
    const bytes = await answer.default(
      "./challenges/part-1_hard-1/beautiful-landscape.png"
    );
    const expectedBytes = [
      1, 129, 233, 0, 129, 233, 0, 129, 232, 0, 129, 231, 0, 129, 231, 0, 129,
      231, 0, 129, 231, 0, 129, 231, 0, 129, 231, 0, 129, 232, 0, 129, 232, 0,
      129, 233, 0, 128, 233, 0, 128, 233, 0, 128, 235, 0, 127, 236, 1, 136, 235,
      0, 136, 236, 0, 136, 235, 0, 136, 234, 0, 136, 234, 0, 137, 234, 0, 137,
      234, 0, 137, 235, 0, 137, 235, 0, 137, 235, 0, 137, 235, 0, 136, 236, 0,
      136, 236, 0, 136, 236, 1, 136, 237, 1, 135, 237, 1, 143, 236, 0, 144, 236,
      0, 144, 236, 0, 144, 236, 0, 145, 236, 0, 146, 236, 0, 146, 236, 0, 147,
      237, 0, 147, 237, 0, 147, 237, 0, 147, 238, 0, 146, 238, 0, 145, 238, 0,
      144, 239, 0, 144, 239, 0, 143, 239, 66, 164, 228, 31, 155, 232, 18, 154,
      235, 19, 154, 235, 19, 155, 235, 21, 156, 235, 21, 157, 235, 21, 157, 236,
      31, 161, 235, 33, 161, 234, 18, 157, 237, 17, 156, 237, 15, 155, 237, 14,
      154, 238, 14, 154, 238, 14, 153, 239, 94, 167, 218, 81, 163, 220, 79, 164,
      221, 80, 165, 220, 74, 167, 224, 65, 166, 227, 82, 172, 227, 87, 177, 229,
      87, 177, 229, 115, 187, 228, 79, 175, 231, 85, 178, 232, 82, 177, 233, 59,
      168, 233, 52, 165, 235, 50, 164, 235, 85, 150, 194, 97, 157, 198, 96, 150,
      188, 90, 141, 176, 89, 144, 180, 75, 140, 180, 83, 140, 177, 85, 144, 181,
      90, 151, 188, 116, 160, 188, 82, 146, 186, 99, 157, 193, 102, 162, 201,
      88, 160, 210, 82, 162, 216, 88, 167, 221, 54, 118, 153, 62, 125, 159, 54,
      115, 148, 48, 105, 136, 54, 108, 136, 48, 105, 136, 39, 100, 135, 39, 103,
      139, 51, 112, 146, 54, 114, 147, 40, 106, 144, 51, 114, 151, 56, 120, 159,
      65, 127, 170, 70, 133, 176, 76, 139, 182, 41, 102, 135, 42, 104, 135, 41,
      104, 135, 41, 105, 137, 42, 105, 135, 42, 109, 142, 41, 110, 146, 43, 112,
      147, 44, 112, 149, 43, 112, 147, 37, 110, 149, 35, 109, 149, 36, 110, 152,
      38, 110, 152, 46, 112, 152, 42, 111, 153, 82, 127, 157, 82, 128, 155, 82,
      129, 155, 81, 130, 157, 78, 127, 155, 76, 133, 165, 78, 135, 166, 75, 132,
      162, 74, 133, 165, 79, 135, 163, 70, 130, 164, 70, 130, 163, 70, 133, 169,
      65, 131, 169, 62, 128, 166, 59, 129, 170,
    ];
    expect(bytes).toEqual(expectedBytes);
  });
});
